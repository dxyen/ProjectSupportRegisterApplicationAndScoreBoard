// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupportRegister.Data.EF;

namespace SupportRegister.Data.Migrations
{
    [DbContext(typeof(ProjectSupportRegisterContext))]
    [Migration("20220907040418_Seed_data")]
    partial class Seed_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "8bb2fa17-18a7-4d04-a909-fa3d8b63cf65",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            ConcurrencyStamp = "193c58c4-2e36-422f-b5ea-edb05822c1e5",
                            Description = "Staff role",
                            Name = "staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = new Guid("bff91054-dc92-421e-a233-d1080f630928"),
                            ConcurrencyStamp = "38281943-5bdf-49d8-a6b2-6b382c233d00",
                            Description = "Student role",
                            Name = "student",
                            NormalizedName = "student"
                        });
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "da410ce5-1ae5-4ef1-ac7a-b0907c234498",
                            Email = "yenb1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Đỗ Xuân Yên",
                            LockoutEnabled = false,
                            NormalizedEmail = "yenb1809323@student.ctu.edu.vn",
                            NormalizedUserName = "YenDX",
                            PasswordHash = "AQAAAAEAACcQAAAAECt2LzKBe6RjbBfQWWrcwu8TGwCj7d96CFv4Cqn8e/STNO+suIRbQPqyPta7QgWiLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "YenDX"
                        },
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Ninh Kiều, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "001ddcb5-6fa5-4688-a942-bb31f836e080",
                            Email = "trucb1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Võ Thị Thanh Trúc",
                            LockoutEnabled = false,
                            NormalizedEmail = "trucb1809323@student.ctu.edu.vn",
                            NormalizedUserName = "TrucVTT",
                            PasswordHash = "AQAAAAEAACcQAAAAEKQ4QZS3smC6IVTrgzMTx9PcEnnZjshWr9u54S7dgkRC7pgV25OQIO5xPq/DFiW3iQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "TrucVTT"
                        },
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630929"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Ninh Kiều, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f56387cc-9423-4d5c-8aad-3cf741467c26",
                            Email = "haob1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Vương Như Hảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "haob1809323@student.ctu.edu.vn",
                            NormalizedUserName = "HaoVN",
                            PasswordHash = "AQAAAAEAACcQAAAAENYA2jSpuzUXeGrspMJm9b6GkJ0xSawn7QzAgPWyZhgznAiy+2l+f4l5A9BODDYEWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "HaoVN"
                        },
                        new
                        {
                            Id = new Guid("bff91065-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Ninh Kiều, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bc168440-16a1-488b-9e11-3ea5078fc480",
                            Email = "haob1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Vương Như Hảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "haob1809323@student.ctu.edu.vn",
                            NormalizedUserName = "HaoVN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHxwVX/GK0sIVxXpxlRi1aON15sJumKwUmb3o1V4juOlOxhLKpQVke1wNvDIf0zVwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "HaoVN"
                        });
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Application", b =>
                {
                    b.Property<int>("IdApplication")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("IdTypeApplication")
                        .HasColumnType("int");

                    b.Property<string>("NameApplication")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric(8,2)");

                    b.HasKey("IdApplication")
                        .HasName("PK_APPLICATION");

                    b.HasIndex("IdTypeApplication");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterApplication", b =>
                {
                    b.Property<int>("IdApplication")
                        .HasColumnType("int");

                    b.Property<int>("IdRegisterApplication")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric(8,2)");

                    b.HasKey("IdApplication", "IdRegisterApplication")
                        .HasName("PK_DETAILREGISTERAPPLICATION");

                    b.HasIndex("IdRegisterApplication");

                    b.ToTable("DetailRegisterApplication");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterScoreboard", b =>
                {
                    b.Property<int>("IdRegisterScoreboard")
                        .HasColumnType("int");

                    b.Property<int>("IdScore")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric(8,2)");

                    b.HasKey("IdRegisterScoreboard", "IdScore")
                        .HasName("PK_DETAILREGISTERSCOREBOARD");

                    b.HasIndex("IdScore");

                    b.ToTable("DetailRegisterScoreboard");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .HasColumnType("int");

                    b.Property<string>("NameFeedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("IdFeedback")
                        .HasName("PK_FEEDBACKS");

                    b.HasIndex("StudentId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.Property<int>("IdRegisterApplication")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateRegister")
                        .HasColumnType("date");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("IdRegisterApplication")
                        .HasName("PK_REGISTERAPPLICATION");

                    b.HasIndex("IdStatus");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("RegisterApplication");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.Property<int>("IdRegisterScoreboard")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("date");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("IdRegisterScoreboard")
                        .HasName("PK_REGISTERSCOREBOARD");

                    b.HasIndex("IdStatus");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("RegisterScoreboard");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Scoreboard", b =>
                {
                    b.Property<int>("IdScore")
                        .HasColumnType("int");

                    b.Property<string>("NameScore")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IdScore")
                        .HasName("PK_SCOREBOARD");

                    b.ToTable("Scoreboard");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Semester", b =>
                {
                    b.Property<int>("IdSemester")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("IdRegisterScoreboard")
                        .HasColumnType("int");

                    b.Property<string>("NameSemester")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IdSemester")
                        .HasName("PK_SEMESTER");

                    b.HasIndex("IdRegisterScoreboard");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IdStatus")
                        .HasName("PK_STATUS");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.TypeApplication", b =>
                {
                    b.Property<int>("IdTypeApplication")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameTypeApplication")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IdTypeApplication")
                        .HasName("PK_TYPEAPPLICATION");

                    b.ToTable("TypeApplication");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Year", b =>
                {
                    b.Property<int>("IdYear")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("IdRegisterScoreboard")
                        .HasColumnType("int");

                    b.Property<int>("Yearr")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("IdYear")
                        .HasName("PK_YEAR");

                    b.HasIndex("IdRegisterScoreboard");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Application", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.TypeApplication", "IdTypeApplicationNavigation")
                        .WithMany("Applications")
                        .HasForeignKey("IdTypeApplication")
                        .HasConstraintName("FK_APPLICATION_TYPEAPPLICATION")
                        .IsRequired();

                    b.Navigation("IdTypeApplicationNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterApplication", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Application", "IdApplicationNavigation")
                        .WithMany("DetailRegisterApplications")
                        .HasForeignKey("IdApplication")
                        .HasConstraintName("FK_DETAILRE_APPLICATION")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.RegisterApplication", "IdRegisterApplicationNavigation")
                        .WithMany("DetailRegisterApplications")
                        .HasForeignKey("IdRegisterApplication")
                        .HasConstraintName("FK_DETAILRE_REGISTERAPPLICATION")
                        .IsRequired();

                    b.Navigation("IdApplicationNavigation");

                    b.Navigation("IdRegisterApplicationNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterScoreboard", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.RegisterScoreboard", "IdRegisterScoreboardNavigation")
                        .WithMany("DetailRegisterScoreboards")
                        .HasForeignKey("IdRegisterScoreboard")
                        .HasConstraintName("FK_DETAILRE_REGISTERSCOREBOARD")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Scoreboard", "IdScoreNavigation")
                        .WithMany("DetailRegisterScoreboards")
                        .HasForeignKey("IdScore")
                        .HasConstraintName("FK_DETAILRE_SCORE")
                        .IsRequired();

                    b.Navigation("IdRegisterScoreboardNavigation");

                    b.Navigation("IdScoreNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Feedback", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_FEEDBACK_STUDENT")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Status", "IdStatusNavigation")
                        .WithMany("RegisterApplications")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("FK_REGISTER_STATUS")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Staff", "Staff")
                        .WithMany("RegisterApplications")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_REGISTER_STAFF")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("RegisterApplications")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_REGISTERAPPLICATION_STUDENT")
                        .IsRequired();

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Status", "IdStatusNavigation")
                        .WithMany("RegisterScoreboards")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("FK_REGISTERSCOREBOARD_STATUS")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Staff", "Staff")
                        .WithMany("RegisterScoreboards")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_REGISTERSCOREBOARD_STAFF")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("RegisterScoreboards")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_REGISTERSCOREBOARD_STUDENTS")
                        .IsRequired();

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Semester", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.RegisterScoreboard", "IdRegisterScoreboardNavigation")
                        .WithMany("Semesters")
                        .HasForeignKey("IdRegisterScoreboard")
                        .HasConstraintName("FK_SEMESTER_REGISTER")
                        .IsRequired();

                    b.Navigation("IdRegisterScoreboardNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Staff", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", "User")
                        .WithMany("Staff")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_STAFFS_USERS")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_STUDENTS_USERS")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Year", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.RegisterScoreboard", "IdRegisterScoreboardNavigation")
                        .WithMany("Years")
                        .HasForeignKey("IdRegisterScoreboard")
                        .HasConstraintName("FK_YEAR_FK_REGIST_REGISTER")
                        .IsRequired();

                    b.Navigation("IdRegisterScoreboardNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppUser", b =>
                {
                    b.Navigation("Staff");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Application", b =>
                {
                    b.Navigation("DetailRegisterApplications");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.Navigation("DetailRegisterApplications");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.Navigation("DetailRegisterScoreboards");

                    b.Navigation("Semesters");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Scoreboard", b =>
                {
                    b.Navigation("DetailRegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Staff", b =>
                {
                    b.Navigation("RegisterApplications");

                    b.Navigation("RegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Status", b =>
                {
                    b.Navigation("RegisterApplications");

                    b.Navigation("RegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("RegisterApplications");

                    b.Navigation("RegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.TypeApplication", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
