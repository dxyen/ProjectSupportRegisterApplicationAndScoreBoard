// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupportRegister.Data.EF;

namespace SupportRegister.Data.Migrations
{
    [DbContext(typeof(ProjectSupportRegisterContext))]
    [Migration("20221011063934_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "9aaff60d-c90f-46cd-8922-8af1ec84b022",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            ConcurrencyStamp = "57fac229-f3d6-476b-8e9d-378b230b6eea",
                            Description = "Staff role",
                            Name = "staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = new Guid("bff91054-dc92-421e-a233-d1080f630928"),
                            ConcurrencyStamp = "a9ed1891-beea-4c43-bb5f-f4dc4e1c43da",
                            Description = "Student role",
                            Name = "student",
                            NormalizedName = "student"
                        });
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7c05c63b-62c3-4644-9303-00258536b275",
                            Email = "yenb1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Đỗ Xuân Yên",
                            LockoutEnabled = false,
                            NormalizedEmail = "yenb1809323@student.ctu.edu.vn",
                            NormalizedUserName = "YenDX",
                            PasswordHash = "AQAAAAEAACcQAAAAELnobsFwxdhmeblq+HsPujvhIfmwNmhQTaZwbW7zheRPfMWWUo1E/Bqjj1YvpnJ32w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "YenDX"
                        },
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Ninh Kiều, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4546f16e-1fc5-4081-8153-a1313806acff",
                            Email = "trucb1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Võ Thị Thanh Trúc",
                            LockoutEnabled = false,
                            NormalizedEmail = "trucb1809323@student.ctu.edu.vn",
                            NormalizedUserName = "TrucVTT",
                            PasswordHash = "AQAAAAEAACcQAAAAEDl50yipYvgXv5QLQE223cCBZLts3bRkm98Yv9dSgaLvgz9wDzcWkVO89NZnrJqkfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "TrucVTT"
                        },
                        new
                        {
                            Id = new Guid("bff91065-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Ninh Kiều, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ac7c8387-12d4-47ec-930d-43532c8f438f",
                            Email = "haob1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Vương Như Hảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "haob1809323@student.ctu.edu.vn",
                            NormalizedUserName = "HaoVN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmQBRIAMzRkns9nwc9p/7wRln5DSxouD0h/g6pIGnqqZYDklMMG8RO3aN43YlUx0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "HaoVN"
                        });
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Application", b =>
                {
                    b.Property<int>("IdApplication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameApplication")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("IdApplication")
                        .HasName("PK_APPLICATION");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterApplication", b =>
                {
                    b.Property<int>("IdApplication")
                        .HasColumnType("int");

                    b.Property<int>("IdRegisterApplication")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("IdApplication", "IdRegisterApplication")
                        .HasName("PK_DETAILREGISTERAPPLICATION");

                    b.HasIndex("IdRegisterApplication");

                    b.ToTable("DetailRegisterApplication");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterScoreboard", b =>
                {
                    b.Property<int>("IdRegisterScoreboard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdScore")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("IdRegisterScoreboard", "IdScore")
                        .HasName("PK_DETAILREGISTERSCOREBOARD");

                    b.HasIndex("IdScore");

                    b.ToTable("DetailRegisterScoreboard");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentFeedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("IdFeedback")
                        .HasName("PK_FEEDBACKS");

                    b.HasIndex("StudentId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.Property<int>("IdRegisterApplication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateRegister")
                        .HasColumnType("date");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("IdRegisterApplication")
                        .HasName("PK_REGISTERAPPLICATION");

                    b.HasIndex("IdStatus");

                    b.HasIndex("StudentId");

                    b.ToTable("RegisterApplication");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.Property<int>("IdRegisterScoreboard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("date");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("IdRegisterScoreboard")
                        .HasName("PK_REGISTERSCOREBOARD");

                    b.HasIndex("IdStatus");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.HasIndex("YearId");

                    b.ToTable("RegisterScoreboard");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Scoreboard", b =>
                {
                    b.Property<int>("IdScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameScore")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("IdScore")
                        .HasName("PK_SCOREBOARD");

                    b.ToTable("Scoreboard");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Semester", b =>
                {
                    b.Property<int>("IdSemester")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameSemester")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IdSemester")
                        .HasName("PK_SEMESTER");

                    b.ToTable("Semester");

                    b.HasData(
                        new
                        {
                            IdSemester = 1,
                            NameSemester = "Học kỳ I"
                        },
                        new
                        {
                            IdSemester = 2,
                            NameSemester = "Học kỳ II"
                        },
                        new
                        {
                            IdSemester = 3,
                            NameSemester = "Học kỳ hè"
                        });
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IdStatus")
                        .HasName("PK_STATUS");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("YearStart")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Year", b =>
                {
                    b.Property<int>("IdYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Year1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Year");

                    b.HasKey("IdYear")
                        .HasName("PK_YEAR");

                    b.ToTable("Year");

                    b.HasData(
                        new
                        {
                            IdYear = 1,
                            Year1 = "2019-2020"
                        },
                        new
                        {
                            IdYear = 2,
                            Year1 = "2020-2021"
                        },
                        new
                        {
                            IdYear = 3,
                            Year1 = "2021-2022"
                        },
                        new
                        {
                            IdYear = 4,
                            Year1 = "2022-2023"
                        },
                        new
                        {
                            IdYear = 5,
                            Year1 = "2023-2024"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterApplication", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Application", "IdApplicationNavigation")
                        .WithMany("DetailRegisterApplications")
                        .HasForeignKey("IdApplication")
                        .HasConstraintName("FK_DETAILRE_APPLICATION")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.RegisterApplication", "IdRegisterApplicationNavigation")
                        .WithMany("DetailRegisterApplications")
                        .HasForeignKey("IdRegisterApplication")
                        .HasConstraintName("FK_DETAILRE_REGISTERAPPLICATION")
                        .IsRequired();

                    b.Navigation("IdApplicationNavigation");

                    b.Navigation("IdRegisterApplicationNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterScoreboard", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.RegisterScoreboard", "IdRegisterScoreboardNavigation")
                        .WithMany("DetailRegisterScoreboards")
                        .HasForeignKey("IdRegisterScoreboard")
                        .HasConstraintName("FK_DETAILRE_REGISTERSCOREBOARD")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Scoreboard", "IdScoreNavigation")
                        .WithMany("DetailRegisterScoreboards")
                        .HasForeignKey("IdScore")
                        .HasConstraintName("FK_DETAILRE_SCORE")
                        .IsRequired();

                    b.Navigation("IdRegisterScoreboardNavigation");

                    b.Navigation("IdScoreNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Feedback", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_FEEDBACK_STUDENT")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Status", "IdStatusNavigation")
                        .WithMany("RegisterApplications")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("FK_REGISTER_STATUS")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("RegisterApplications")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_REGISTERAPPLICATION_STUDENT")
                        .IsRequired();

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Status", "IdStatusNavigation")
                        .WithMany("RegisterScoreboards")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("FK_REGISTERSCOREBOARD_STATUS")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Semester", "Semester")
                        .WithMany("RegisterScoreboards")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("Fk_Semeter_RegidterScoreboard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("RegisterScoreboards")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_REGISTERSCOREBOARD_STUDENTS")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Year", "Year")
                        .WithMany("RegisterScoreboards")
                        .HasForeignKey("YearId")
                        .HasConstraintName("Fk_Year_RegisterScoreboard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("Semester");

                    b.Navigation("Student");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Staff", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", "User")
                        .WithMany("Staff")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_STAFFS_USERS")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_STUDENTS_USERS")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppUser", b =>
                {
                    b.Navigation("Staff");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Application", b =>
                {
                    b.Navigation("DetailRegisterApplications");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.Navigation("DetailRegisterApplications");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.Navigation("DetailRegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Scoreboard", b =>
                {
                    b.Navigation("DetailRegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Semester", b =>
                {
                    b.Navigation("RegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Status", b =>
                {
                    b.Navigation("RegisterApplications");

                    b.Navigation("RegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("RegisterApplications");

                    b.Navigation("RegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Year", b =>
                {
                    b.Navigation("RegisterScoreboards");
                });
#pragma warning restore 612, 618
        }
    }
}
