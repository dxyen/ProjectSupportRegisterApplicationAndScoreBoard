// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupportRegister.Data.EF;

namespace SupportRegister.Data.Migrations
{
    [DbContext(typeof(ProjectSupportRegisterContext))]
    [Migration("20221014035530_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "5c1f42e4-a3d0-4630-8e8f-f334675b755c",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            ConcurrencyStamp = "5cc64c3b-9efc-42e7-84c3-94559caf8621",
                            Description = "Staff role",
                            Name = "staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = new Guid("bff91054-dc92-421e-a233-d1080f630928"),
                            ConcurrencyStamp = "a0e2fbf5-9e34-49dc-a268-1444773d81c4",
                            Description = "Student role",
                            Name = "student",
                            NormalizedName = "student"
                        });
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "73b015ee-67d0-4268-8ae2-5771431c5a91",
                            Email = "yenb1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Đỗ Xuân Yên",
                            LockoutEnabled = false,
                            NormalizedEmail = "yenb1809323@student.ctu.edu.vn",
                            NormalizedUserName = "YenDX",
                            PasswordHash = "AQAAAAEAACcQAAAAEChXIjO+ua6ALnRsS0J7nwZzegmdiCOaeisq/bTGwwCxerPAaZhkPP2+YTMzFhvPGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "YenDX"
                        },
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Ninh Kiều, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f5776b92-f26f-42c0-b4fb-6c358c2cd166",
                            Email = "trucb1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Võ Thị Thanh Trúc",
                            LockoutEnabled = false,
                            NormalizedEmail = "trucb1809323@student.ctu.edu.vn",
                            NormalizedUserName = "TrucVTT",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUtEc0WkqhVdeVYpd2yj05ZffgOv89Su/sdv6MdHBdHWRjQ8HDsdnfpVh3wqkbbew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "TrucVTT"
                        },
                        new
                        {
                            Id = new Guid("bff91065-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            Address = "Hưng Lợi, Ninh Kiều, Cần Thơ",
                            Birthday = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6870dffd-ba74-4eb7-a7cc-486f11194730",
                            Email = "haob1809323@student.ctu.edu.vn",
                            EmailConfirmed = false,
                            FullName = "Vương Như Hảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "haob1809323@student.ctu.edu.vn",
                            NormalizedUserName = "HaoVN",
                            PasswordHash = "AQAAAAEAACcQAAAAENEmIUfOC7eM0WRVW64vPf58QSpuSwLZjGvlc+dHAFhzQr+Ys+6scG+AoCSdMctkRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "HaoVN"
                        });
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Application", b =>
                {
                    b.Property<int>("IdApplication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameApplication")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("IdApplication")
                        .HasName("PK_APPLICATION");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameClass")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ClassId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Course", b =>
                {
                    b.Property<string>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength(true);

                    b.Property<string>("NameCourse")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCourse")
                        .HasName("PK__Course__E0B50B816A385DF6");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterApplication", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("RegisId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "RegisId")
                        .HasName("PK__DetailRe__D170D43024840281");

                    b.HasIndex("RegisId");

                    b.ToTable("DetailRegisterApplication");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterScoreboard", b =>
                {
                    b.Property<int>("RegisId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("RegisId", "SemesterId", "StudentId", "YearId")
                        .HasName("PK__DetailRe__B873A826F6F01A76");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.HasIndex("YearId");

                    b.ToTable("DetailRegisterScoreboard");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentFeedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("IdFeedback")
                        .HasName("PK_FEEDBACKS");

                    b.HasIndex("StudentId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.Property<int>("IdRegisterApplication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("date");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.HasKey("IdRegisterApplication")
                        .HasName("PK_REGISTERAPPLICATION");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("IdStatus");

                    b.ToTable("RegisterApplication");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.Property<int>("IdRegisterScoreboard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("date");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.HasKey("IdRegisterScoreboard")
                        .HasName("PK_REGISTERSCOREBOARD");

                    b.HasIndex("IdStatus");

                    b.ToTable("RegisterScoreboard");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Semester", b =>
                {
                    b.Property<int>("IdSemester")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameSemester")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("IdSemester")
                        .HasName("PK_SEMESTER");

                    b.ToTable("Semester");

                    b.HasData(
                        new
                        {
                            IdSemester = 1,
                            NameSemester = "Học kỳ I",
                            Price = 0
                        },
                        new
                        {
                            IdSemester = 2,
                            NameSemester = "Học kỳ II",
                            Price = 0
                        },
                        new
                        {
                            IdSemester = 3,
                            NameSemester = "Học kỳ hè",
                            Price = 0
                        });
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("IdCourse")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength(true);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("YearEnd")
                        .HasColumnType("int");

                    b.Property<int>("YearStart")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("IdCourse");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Year", b =>
                {
                    b.Property<int>("IdYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Year1")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("IdYear")
                        .HasName("PK_YEAR");

                    b.ToTable("Year");

                    b.HasData(
                        new
                        {
                            IdYear = 1,
                            Year1 = 2018
                        },
                        new
                        {
                            IdYear = 2,
                            Year1 = 2019
                        },
                        new
                        {
                            IdYear = 3,
                            Year1 = 2020
                        },
                        new
                        {
                            IdYear = 4,
                            Year1 = 2021
                        },
                        new
                        {
                            IdYear = 5,
                            Year1 = 2022
                        },
                        new
                        {
                            IdYear = 6,
                            Year1 = 2023
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterApplication", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.RegisterApplication", "Regis")
                        .WithMany("DetailRegisterApplications")
                        .HasForeignKey("RegisId")
                        .HasConstraintName("Fk_detailapp_regisapp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("DetailRegisterApplications")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("Fk_detailapp_stu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regis");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.DetailRegisterScoreboard", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.RegisterScoreboard", "Regis")
                        .WithMany("DetailRegisterScoreboards")
                        .HasForeignKey("RegisId")
                        .HasConstraintName("Fk_regis_score")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Semester", "Semester")
                        .WithMany("DetailRegisterScoreboards")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("Fk_detail_semester")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("DetailRegisterScoreboards")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("Fk_detail_stu")
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Year", "Year")
                        .WithMany("DetailRegisterScoreboards")
                        .HasForeignKey("YearId")
                        .HasConstraintName("Fk_detail_year")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regis");

                    b.Navigation("Semester");

                    b.Navigation("Student");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Feedback", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Student", "Student")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_FEEDBACK_STUDENT")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Application", "Application")
                        .WithMany("RegisterApplications")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("Fk_regis_app")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Status", "IdStatusNavigation")
                        .WithMany("RegisterApplications")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("Fk_regisapp_status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("IdStatusNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Status", "IdStatusNavigation")
                        .WithMany("RegisterScoreboards")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("Fk_status_score")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdStatusNavigation");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Staff", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.AppUser", "User")
                        .WithMany("Staff")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_STAFFS_USERS")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.HasOne("SupportRegister.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("Fk_student_class")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.Course", "IdCourseNavigation")
                        .WithMany("Students")
                        .HasForeignKey("IdCourse")
                        .HasConstraintName("Fk_stu_course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportRegister.Data.Models.AppUser", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_STUDENTS_USERS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("IdCourseNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.AppUser", b =>
                {
                    b.Navigation("Staff");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Application", b =>
                {
                    b.Navigation("RegisterApplications");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Course", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterApplication", b =>
                {
                    b.Navigation("DetailRegisterApplications");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.RegisterScoreboard", b =>
                {
                    b.Navigation("DetailRegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Semester", b =>
                {
                    b.Navigation("DetailRegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Status", b =>
                {
                    b.Navigation("RegisterApplications");

                    b.Navigation("RegisterScoreboards");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Student", b =>
                {
                    b.Navigation("DetailRegisterApplications");

                    b.Navigation("DetailRegisterScoreboards");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("SupportRegister.Data.Models.Year", b =>
                {
                    b.Navigation("DetailRegisterScoreboards");
                });
#pragma warning restore 612, 618
        }
    }
}
